set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(x = x, set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...)
{
i <- x$getinverse()
data <- x$get()
if(!is.null(i) && x$x==data) {
message("getting cached data after checking matrix has not changed")
return(i)
}
i <- solve(data)
x$setinverse(i)
i
}
debug(cacheSolve)
cacheSolve(makeCacheMatrix(matrix(c(2, 4, 3, 1), nrow=2, ncol=2) ))
# This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(x = x, set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...)
{
i <- x$getinverse()
data <- x$get()
if(!is.null(i)) if(x$x==data) {
message("getting cached data after checking matrix has not changed")
return(i)
}
i <- solve(data)
x$setinverse(i)
i
}
debug(cacheSolve)
cacheSolve(makeCacheMatrix(matrix(c(2, 4, 3, 1), nrow=2, ncol=2) ))
# This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(x = x, set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...)
{
i <- x$getinverse()
data <- x$get()
if(x$x==data)
{
if(!is.null(i)) {
message("getting cached data after checking matrix has not changed")
return(i)
}
}
i <- solve(data)
x$setinverse(i)
i
}
debug(cacheSolve)
cacheSolve(makeCacheMatrix(matrix(c(2, 4, 3, 1), nrow=2, ncol=2) ))
# This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix())
{
i <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(x = x, set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...)
{
i <- x$getinverse()
data <- x$get()
if(identical(x$x,data))
{
if(!is.null(i)) {
message("getting cached data after checking matrix has not changed")
return(i)
}
}
i <- solve(data)
x$setinverse(i)
i
}
debug(cacheSolve)
cacheSolve(makeCacheMatrix(matrix(c(2, 4, 3, 1), nrow=2, ncol=2) ))
setwd("/Users/serena_kohli/Desktop/Assignment")
data <- read.table("household_power_consumption.txt",header = TRUE, sep =";")
View(data)
View(data)
as.data.frame(data)
strptime(data$Time,format = '%H:%M:%S')
data$Date <- as.Date(data$Date,"%d/%m/%Y")
data$Time <- strptime(data$Time,format = '%H:%M:%S')
hist(data$Global_activity_power)
hist(as.numeric(data$Global_active_power))
hist(as.numeric(as.character(data$Global_active_power)))
hist(as.numeric(data$Global_active_power))
hist(as.numeric(as.character(data$Global_active_power)),
xlab="Global Active Power (kilowatts)",
xlim=c(0,6))
hist(as.numeric(as.character(data$Global_active_power)),
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6))
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6))
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6),
na.omit = TRUE)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6)
breaks=2)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6),
breaks=2)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6),
breaks = 2)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6))
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6)
ylim=c(0,1200))
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
breaks=seq(0,6,2),
ylim=c(0,1200))
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
breaks=seq(0,6,by = 2),
ylim=c(0,1200))
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6),
ylim=c(0,1200))
data1 <- data[,which(data$Date>="01/02/2007" & data$Date<="02/02/2007"),]
View(data1)
View(data)
data1 <- data[,which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
data1 <- data[which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
hist(as.numeric(as.character(data1$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6),
ylim=c(0,1200))
setwd("/Users/serena_kohli/Desktop/Assignment/ExData_Plotting1")
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
hist(as.numeric(as.character(data1$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red",
xlim=c(0,6),
ylim=c(0,1200))
dev.off()
setwd("/Users/serena_kohli/Desktop/Assignment/ExData_Plotting1")
data <- read.table("household_power_consumption.txt",header = TRUE, sep =";")
as.data.frame(data)
data$Time <- strptime(data$Time,format = '%H:%M:%S')
data$Date <- as.Date(data$Date,"%d/%m/%Y")
data1 <- data[which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
data1$day <- weekdays(data1$Date)
View(data1)
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(as.numeric(as.character(data1$Global_active_power)),
data1$day,
ylab="Global Active Power (kilowatts)")
plot(data1$day,
as.numeric(as.character(data1$Global_active_power)),
ylab="Global Active Power (kilowatts)")
unique(data1$day)
plot(data1$day,
as.numeric(as.character(data1$Global_active_power)),
xlim = ("Thursday","Saturday"),
ylab="Global Active Power (kilowatts)")
plot(data1$day,
as.numeric(as.character(data1$Global_active_power)),
)
max(data1$day)
min(data1$day)
plot(data1$day,
as.numeric(as.character(data1$Global_active_power)),
xlim = (max(data1$day),max(data1$day)),
ylab="Global Active Power (kilowatts)")
plot(data1$day,
as.numeric(as.character(data1$Global_active_power)),
xlim = c(max(data1$day),min(data1$day)),
ylab="Global Active Power (kilowatts)")
plot(x=data1$day,
y=as.numeric(as.character(data1$Global_active_power)),
xlim = c(max(data1$day),min(data1$day)),
ylab="Global Active Power (kilowatts)")
plot(x=data1$day,
y=as.numeric(as.character(data1$Global_active_power)),
# xlim = c(max(data1$day),min(data1$day)),
ylab="Global Active Power (kilowatts)")
plot(x=data1$day,
y=as.numeric(as.character(data1$Global_active_power)),
xlim = c(3,4),
ylab="Global Active Power (kilowatts)")
plot(x=data1$day,
y=as.numeric(as.character(data1$Global_active_power)),
xlim = c(3,4),
ylab="Global Active Power (kilowatts)")
dev.off()
xrange <- range( c("Thursday","Friday","Saturday") )
plot(x=data1$day,
y=as.numeric(as.character(data1$Global_active_power)),
xlim = xrange,
ylab="Global Active Power (kilowatts)")
xrange <-  c("Thursday","Friday","Saturday")
plot(x=data1$day,
y=as.numeric(as.character(data1$Global_active_power)),
xlim = xrange,
ylab="Global Active Power (kilowatts)")
unique(data1$day)
xrange
data1$Date <- as.factor(weekdays(data1$Date))
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(x=data1$Date,
y=as.numeric(as.character(data1$Global_active_power)),
ylab="Global Active Power (kilowatts)")
dev.off()
data1 <- data[which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(x=data1$Date,
y=as.numeric(as.character(data1$Global_active_power)),
ylab="Global Active Power (kilowatts)")
dev.off()
data1 <- data[which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(x=data1$Date,
y=as.numeric(as.character(data1$Global_active_power)),
ylab="Global Active Power (kilowatts)")
dev.off()
plot(x=data1$Date,
y=as.numeric(as.character(data1$Global_active_power)),
type="l",
ylab="Global Active Power (kilowatts)")
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
with(data1,plot(Date1,
Global_active_power,
type="l",
ylab="Global Active Power (kilowatts)"))
dev.off()
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
with(data1,plot(Date,
Global_active_power,
type="l",
ylab="Global Active Power (kilowatts)"))
dev.off()
data <- read.table("household_power_consumption.txt",header = TRUE, sep =";")
as.data.frame(data)
dt <-paste(data$Date,data$Time)
data$dt <-strptime(dt, "%d/%m/%Y %H:%M:%S")
data1 <- data[which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
with(data1,plot(Date,
Global_active_power,
type="l",
ylab="Global Active Power (kilowatts)"))
dev.off()
with(data1,plot(dt,
Global_active_power,
type="l",
ylab="Global Active Power (kilowatts)"))
View(data)
data1 <- data[which(data$Date>="01/02/2007" & data$Date<="02/02/2007"),]
data$Date <- as.Date(data$Date,"%d/%m/%Y")
data1 <- data[which(data$Date>="2007-02-01" & data$Date<="2007-02-02"),]
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
with(data1,plot(dt,
Global_active_power,
type="l",
ylab="Global Active Power (kilowatts)"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(data1$dt,
data1$Sub_metering_1,
type="l",
ylab="Energey Sub Metering",
col = "grey")
points(data1$dt,
data1$Sub_metering_2,
type="l",
col = "red")
points(data1$dt,
data1$Sub_metering_3,
type="l",
col = "blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("grey","red","blue"),lty=1)
dev.off()
png(filename = "plot4.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
par(mfrow=c(2,2))
plot(data1$dt,
data1$Global_active_power,
type="l",
ylab="Global Active Power (kilowatts)")
plot(data1$dt,
data1$Voltage,
type="l",
ylab="Voltage")
plot(data1$dt,
data1$Sub_metering_1,
type="l",
ylab="Energey Sub Metering",
col = "grey")
points(data1$dt,
data1$Sub_metering_2,
type="l",
col = "red")
points(data1$dt,
data1$Sub_metering_3,
type="l",
col = "blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("grey","red","blue"),lty=1)
plot(data1$dt,
data1$Global_reactive_power,
type="l",
ylab="Global Active Power (kilowatts)")
dev.off()
png(filename = "plot4.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
par(mfrow=c(2,2))
plot(data1$dt,
data1$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
plot(data1$dt,
data1$Voltage,
type="l",
xlab="",
ylab="Voltage")
plot(data1$dt,
data1$Sub_metering_1,
type="l",
ylab="Energey Sub Metering",
col = "grey")
points(data1$dt,
data1$Sub_metering_2,
type="l",
col = "red")
points(data1$dt,
data1$Sub_metering_3,
type="l",
col = "blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("grey","red","blue"),lty=1)
plot(data1$dt,
data1$Global_reactive_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
dev.off()
par(mfrow=c(2,2))
plot(data1$dt,
data1$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
plot(data1$dt,
data1$Voltage,
type="l",
xlab="",
ylab="Voltage")
plot(data1$dt,
data1$Sub_metering_1,
type="l",
xlab="",
ylab="Energey Sub Metering",
col = "grey")
points(data1$dt,
data1$Sub_metering_2,
type="l",
col = "red")
points(data1$dt,
data1$Sub_metering_3,
type="l",
col = "blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("grey","red","blue"),lty=1)
plot(data1$dt,
data1$Global_reactive_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
dev.off()
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(data1$dt,
data1$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(data1$dt,
data1$Sub_metering_1,
type="l",
xlab="",
ylab="Energey Sub Metering",
col = "grey")
points(data1$dt,
data1$Sub_metering_2,
type="l",
col = "red")
points(data1$dt,
data1$Sub_metering_3,
type="l",
col = "blue")
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("grey","red","blue"),lty=1)
dev.off()
